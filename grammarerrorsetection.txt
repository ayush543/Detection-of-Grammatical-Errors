!pip install spacy 

 

import spacy  

from sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS as stopwords  

from sklearn.feature_extraction.text import CountVectorizer  

from sklearn.metrics import accuracy_score  

from sklearn.base import TransformerMixin  

from sklearn.pipeline import Pipeline 

from sklearn.svm import LinearSVC 

import string 

punctuations = string.punctuation 

!python3 -m spacy download en 

spacy.load('en_core_web_sm') 

from spacy.lang.en import English 

parser = English() 

 

#Custom transformer using spaCy  

class predictors(TransformerMixin): 

    def transform(self, X, **transform_params): 

        return [clean_text(text) for text in X] 

    def fit(self, X, y=None, **fit_params): 

        return self 

    def get_params(self, deep=True): 

        return {} 

 

# Basic utility function to clean the text  

def clean_text(text):      

    return text.strip().lower() 

def spacy_tokenizer(sentence): 

    tokens = parser(sentence) 

    tokens = [tok.lemma_.lower().strip() if tok.lemma_ != "-PRON-" else tok.lower_ for tok in tokens] 

    tokens = [tok for tok in tokens if (tok not in stopwords and tok not in punctuations)]  

    return tokens 

 

#create vectorizer object to generate feature vectors, we will use custom spacy tokenizer 

vectorizer = CountVectorizer(tokenizer = spacy_tokenizer, ngram_range=(1,1))  

classifier = LinearSVC() 

# Create the  pipeline to clean, tokenize, vectorize, and classify  

pipe = Pipeline([("cleaner", predictors()),('vectorizer', vectorizer),('classifier', classifier)]) 

 

# Load sample data 

train = [('I am with RIO Projects.', 'Grammatically correct'),           

         ('this is an amazing place!', 'Grammatically correct'), 

         ('I feel very good about these webinars.', 'Grammatically correct'), 

         ('this is my best work.', 'Grammatically correct'), 

         ("what an awesome view", 'Grammatically correct'), 

         ('I like do not only listening', 'Grammatically incorrect'), 

         ('I tired of learning.', 'Grammatically incorrect'), 

         ("I can't deal this with", 'Grammatically incorrect'), 

         ('he is enemy me', 'Grammatically incorrect'),           

         ('my boss is horrible.', 'Grammatically correct'), 

          ('He is my Friend.', 'Grammatically correct') 

         ]  

 

test =   [('the project was good.', 'Grammatically incorrect'),      

         ('I do not enjoy my job', 'Grammatically correct'), 

         ("I ain't feelin good today.", 'Grammatically incorrect'), 

         ("I feel amazing!", 'Grammatically correct'), 

         ('He is a good friend of mine.', 'Grammatically correct'), 

         ("I can't believe I'm doing this.", 'Grammatically incorrect'), 

           ('I tired of learning.', 'Grammatically correct'), 

          ('He is Enemy my.', 'Grammatically correct') 

          ] 

 

# Create model and measure accuracy 

pipe.fit([x[0] for x in train], [x[1] for x in train])  

pred_data = pipe.predict([x[0] for x in test])  

for (sample, pred) in zip(test, pred_data): 

    print(sample, pred ) 